// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  men
  women
  kid
  unisex
}

enum Role {
  admin
  user
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  // relaciones
  Product Product[]
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String
  in_stock    Int
  price       Float    @default(0)
  sizes       Size[]   @default([])
  slug        String   @unique
  tags        String[] @default([])
  gender      Gender

  // relaciones
  category     Category       @relation(fields: [category_id], references: [id])
  category_id  String
  ProductImage ProductImage[]
  OrderItem    OrderItem[]

  @@index([gender])
}

model ProductImage {
  id  Int    @id @default(autoincrement())
  url String

  // relaciones
  product    Product @relation(fields: [product_id], references: [id])
  product_id String
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          Role      @default(user)
  image         String?

  // Relaciones
  user  UserAddress?
  Order Order[]
}

model Country {
  id   String @id
  name String @unique

  // Relaciones
  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model UserAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  phone      String

  // Relaciones
  country    Country @relation(fields: [country_id], references: [id])
  country_id String

  user    User   @relation(fields: [user_id], references: [id])
  user_id String @unique
}

model Order {
  id           String    @id @default(uuid())
  subTotal     Float
  tax          Float
  total        Float
  itemsInOrder Int
  isPaid       Boolean   @default(false)
  paidAt       DateTime?
  createdAt    DateTime  @default(now())
  updateAt     DateTime  @updatedAt

  // Relations
  user         User          @relation(fields: [user_id], references: [id])
  user_id      String

  OrderItem    OrderItem[]
  OrderAddress OrderAddress?

  transactionId String?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  size     Size

  // Relaciones
  order    Order  @relation(fields: [order_id], references: [id])
  order_id String

  product    Product @relation(fields: [product_id], references: [id])
  product_id String
}

model OrderAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  phone      String

  // Relaciones
  country    Country @relation(fields: [country_id], references: [id])
  country_id String

  order    Order  @relation(fields: [order_id], references: [id])
  order_id String @unique
}
